/// Implementation of strings for Zephyr.
module str

use core.mem

/// A String object, composed of a buffer holding the data and a len.
pub struct String {
    len: i32,
    capacity: i32,
    buffer: i32,
}

/// A String slice, a structure that doesn't own the data it points to.
pub struct Str {
    len: i32,
    start: i32,
}

/// Creates a new string.
pub fun new_string(): String {
    let capacity = 12 // Arbitrary default size
    let buffer = mem.malloc(capacity)
    return String {
        len: 0,
        capacity: capacity,
        buffer: buffer,
    }
}

/// Adds a character to the string.
pub fun push_char(s: String, char: i32) {
    if s.capacity <= s.len {
        // Reallocate the buffer
        let new_capacity = s.capacity * 2
        let new_buffer = mem.malloc(new_capacity)
        let old_buffer = s.buffer
        let idx = 0
        while idx < s.len {
            let tmp = mem.read_u8(old_buffer + idx)
            mem.set_u8(new_buffer + idx, tmp)
            idx = idx + 1
        }
        mem.free(s.buffer)
        s.buffer = new_buffer
        s.capacity = new_capacity
    }
    mem.set_u8(s.buffer + s.len, char)
    s.len = s.len + 1
}

/// Return slice from a String.
pub fun as_str(string: String): Str {
    return Str {
        len: string.len,
        start: string.buffer,
    }
}

