/// Implementation of strings for Zephyr.
package "str"

use "core/mem"

/// A String object, composed of a buffer holding the data and a len.
pub struct String {
    len: i32,
    capacity: i32,
    buffer: i32,
}

/// Creates a new string.
pub fun new_str(): String {
    let capacity = 12 // Arbitrary default size
    let buffer = mem.malloc(capacity)
    return String {
        len: 0,
        capacity: capacity,
        buffer: buffer,
    }
}

/// Adds a character to the string.
pub fun push_char(str: String, char: i32) {
    if str.capacity <= str.len {
        // Reallocate the buffer
        let new_capacity = str.capacity * 2
        let new_buffer = mem.malloc(new_capacity)
        let old_buffer = str.buffer
        let idx = 0
        while idx < str.len {
            let tmp = mem.read_u8(old_buffer + idx)
            mem.set_u8(new_buffer + idx, tmp)
            idx = idx + 1
        }
        mem.free(str.buffer)
        str.buffer = new_buffer
        str.capacity = new_capacity
    }
    mem.set_u8(str.buffer + str.len, char)
    str.len = str.len + 1
}
