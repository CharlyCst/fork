{
  "snapshots": [
    {
      "cmd": "../target/debug/zephyr let_equal.zph -o a.wasm",
      "name": "initialize-variable",
      "description": "Variable should be initialized, at lest as long as we don't check if they are\nassigned before being used.\n#parser #let #control-flow",
      "tags": [
        "parser",
        "let",
        "control-flow"
      ],
      "exit_code": 65,
      "stdout": "initialize-variable.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr if_no_arg.zph -o a.wasm",
      "name": "if-no-arg",
      "description": "If statement expects an argument after the 'if' keyword.\n#parser #if #not-satisfying",
      "tags": [
        "parser",
        "if",
        "not-satisfying"
      ],
      "exit_code": 65,
      "stdout": "if-no-arg.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr not_enough_args.zph -o a.wasm",
      "name": "not-enough-args",
      "description": "Calling a function without enough arguments.\n#resolver #fun",
      "tags": [
        "resolver",
        "fun"
      ],
      "exit_code": 65,
      "stdout": "not-enough-args.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr too_many_args.zph -o a.wasm",
      "name": "too-many-args",
      "description": "Calling a function with too much arguments.\n#resolver #fun",
      "tags": [
        "resolver",
        "fun"
      ],
      "exit_code": 65,
      "stdout": "too-many-args.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr not_defined.zph -o a.wasm",
      "name": "not-defined",
      "description": "Use a variable before declaring it.\n#resolver",
      "tags": [
        "resolver"
      ],
      "exit_code": 65,
      "stdout": "not-defined.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr wrong_top_level.zph -o a.wasm",
      "name": "wrong-top-level",
      "description": "Top level 'if' (among other) should not be allowed.\n#parser #if",
      "tags": [
        "parser",
        "if"
      ],
      "exit_code": 65,
      "stdout": "wrong-top-level.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr equal_typing_rules.zph -o a.wasm",
      "name": "equal-typing-rule",
      "description": "Both size of '==' should have the same type.\n#typing #eq",
      "tags": [
        "typing",
        "eq"
      ],
      "exit_code": 65,
      "stdout": "equal-typing-rule.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr multiple_imports.zph -o a.wasm",
      "name": "multiple-imports",
      "description": "The compiler should rise a warning when importing multiple time the same\npackage.\n#driver #warning",
      "tags": [
        "driver",
        "warning"
      ],
      "exit_code": 0,
      "stdout": "multiple_imports.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr circular_import",
      "name": "circular-import",
      "description": "The compiler should rise an error when a circular import is detected.\n#driver",
      "tags": [
        "driver"
      ],
      "exit_code": 65,
      "stdout": "circular-import.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr colon_syntax.zph",
      "name": "colon-syntax",
      "description": "The compiler should rise a nice error when a colon is missing before a type.\n#parser",
      "tags": [
        "parser"
      ],
      "exit_code": 65,
      "stdout": "colon-syntax.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr unauthorized_import.zph",
      "name": "unauthorized-import",
      "description": "Imports are only allowed in 'runtime' packages, the compiler should rise and error if another kind of package defines an import.\n#resolver #import #runtime",
      "tags": [
        "resolver",
        "import",
        "runtime"
      ],
      "exit_code": 65,
      "stdout": "unauthorized-import.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr struct_in_if.zph",
      "name": "struct-in-if",
      "description": "A struct literal expression inside an 'if' statement causes an ambiguity, and thus has been disallowed.\nThe final user may encounter this error from time to time, it is thus of great importance to output a precise error message explaining the situation. To fix is to put parenthesis around the struct literal.\n#grammar #parser",
      "tags": [
        "grammar",
        "parser"
      ],
      "exit_code": 65,
      "stdout": "struct-in-if.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr missing_fields.zph",
      "name": "missing-fields",
      "description": "When instantiating a struct with fewer fields than needed, an error message should indicate the missing fields.\n#typing",
      "tags": [
        "typing"
      ],
      "exit_code": 65,
      "stdout": "missing-fields.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr too_many_fields.zph",
      "name": "too-many-fields",
      "description": "When instantiating a struct with fields that does not exist, the compiler should indicate which fields should be removed.\n#typing",
      "tags": [
        "typing"
      ],
      "exit_code": 65,
      "stdout": "too-many-fields.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr --check equal_typing_rules.zph",
      "name": "check",
      "description": "The '--check' argument can be used to type-check a program.",
      "tags": [],
      "exit_code": 65,
      "stdout": "check.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr incomplete_struct_field.zph",
      "name": "incomplete_struct_field",
      "description": "Should raise an explicit error when an expression is missing after a field's colon \":\".\n#struct #error",
      "tags": [
        "struct",
        "error"
      ],
      "exit_code": 65,
      "stdout": "incomplete_struct_field.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr escape_char.zph -o a.wasm",
      "name": "escape_characters",
      "description": "If an invalid escape sequence is found an warning should be raised explaining that the sequence is not valid.\n#scan #str",
      "tags": [
        "scan",
        "str"
      ],
      "exit_code": 0,
      "stdout": "escape_characters.out",
      "stderr": null
    },
    {
      "cmd": "./target/debug/zephyr tuple_size.zph",
      "name": "tuple-size-do-no-match",
      "description": "If a tuple of incorrect size is received a type error should be raised.\n#typing #tuple",
      "tags": [
        "typing",
        "tuple"
      ],
      "exit_code": 127,
      "stdout": null,
      "stderr": "tuple-size-do-no-match.err"
    },
    {
      "cmd": "../target/debug/zephyr non_tuple.zph",
      "name": "non-tuple",
      "description": "Raise an error when receiving a non tuple when a tuple is expected.\n#typing #tuple",
      "tags": [
        "typing",
        "tuple"
      ],
      "exit_code": 65,
      "stdout": "non-tuple.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr --check missing_runtime_keyword.zph",
      "name": "missing-runtime-keyword",
      "description": "At the time being 'abstract' must always be followed by the 'runtime' keyword\n#parser",
      "tags": [
        "parser"
      ],
      "exit_code": 65,
      "stdout": "missing-runtime-keyword.out",
      "stderr": null
    },
    {
      "cmd": "../target/debug/zephyr --check missing_runtime_name.zph",
      "name": "missing-runtime-name",
      "description": "When the name of a runtime interface is missing the parser should raise an error.\nTODO: currently the parser raises false errors because of bad synchronization, we should fix that...\n#parser #todo",
      "tags": [
        "parser",
        "todo"
      ],
      "exit_code": 65,
      "stdout": "missing-runtime-name.out",
      "stderr": null
    }
  ]
}